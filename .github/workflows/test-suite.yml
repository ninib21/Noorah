name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: nannyradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      run: cd backend && npm ci
    
    - name: Setup environment
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/nannyradar_test" >> .env
        echo "JWT_SECRET=test-secret" >> .env
        echo "NODE_ENV=test" >> .env
    
    - name: Run backend unit tests
      run: cd backend && npm run test
    
    - name: Run backend e2e tests
      run: cd backend && npm run test:e2e
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: nannyradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: babysitting-app/package-lock.json
    
    - name: Install frontend dependencies
      run: cd babysitting-app && npm ci
    
    - name: Setup environment
      run: |
        cd babysitting-app
        echo "EXPO_PUBLIC_API_URL=http://localhost:3001" >> .env
        echo "EXPO_PUBLIC_GOOGLE_MAPS_API_KEY=test-key" >> .env
    
    - name: Run frontend unit tests
      run: cd babysitting-app && npm run test
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./babysitting-app/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: nannyradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../babysitting-app && npm ci
    
    - name: Start backend server
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/nannyradar_test" >> .env
        echo "JWT_SECRET=test-secret" >> .env
        npm run start:dev &
        sleep 10
    
    - name: Run OWASP ZAP security scan
      run: |
        cd backend
        npm run test:owasp
    
    - name: Run Snyk security scan
      run: |
        cd backend
        npm run test:snyk
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: |
          backend/snyk-report.json
          backend/zap-report.html

  load-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: nannyradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: cd backend && npm ci
    
    - name: Start backend server
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/nannyradar_test" >> .env
        echo "JWT_SECRET=test-secret" >> .env
        npm run start:dev &
        sleep 10
    
    - name: Run load tests
      run: |
        cd backend
        npm run test:load
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: backend/load-test-results.json

  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: nannyradar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: babysitting-app/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../babysitting-app && npm ci
    
    - name: Start backend server
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/nannyradar_test" >> .env
        echo "JWT_SECRET=test-secret" >> .env
        npm run start:dev &
        sleep 10
    
    - name: Run E2E tests
      run: |
        cd babysitting-app
        npm run test:e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: babysitting-app/e2e-results/ 